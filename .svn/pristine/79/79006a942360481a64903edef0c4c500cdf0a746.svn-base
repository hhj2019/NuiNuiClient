package kr.or.ddit.nn.view.myInfo;

import java.io.IOException;
import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ResourceBundle;

import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXTextArea;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;
import javafx.util.Callback;
import kr.or.ddit.nn.main.Session;
import kr.or.ddit.nn.service.playlist.PlaylistService;
import kr.or.ddit.nn.view.mypage.Mypage_main;
import kr.or.ddit.nn.vo.playlist.PlaylistVO;

public class My_Playlist_Controller implements Initializable {

	@FXML
	private Pane mainPane;
	@FXML
	private JFXButton musichistory_btn;
	@FXML
	private JFXButton playlist_btn;
	@FXML
	private JFXButton like_btn;
	@FXML
	private JFXTextArea content_field;
	@FXML
	private JFXButton buyhistory_btn;
	@FXML
	private JFXButton myinfo_btn;
	@FXML
	private JFXButton mylevel_btn;
	@FXML
	private TableView<PlaylistVO> playlist_table;
	@FXML
	private TableColumn<PlaylistVO, Integer> playlist_no_col;
	@FXML
	private TableColumn<PlaylistVO, String> playlist_info_col;
	@FXML
	private JFXButton insert_playlist;
	@FXML
	private JFXButton delete_playlist;
	@FXML
	private JFXButton info_playlist;
	@FXML
	private Pagination pga;
	@FXML
	private BorderPane Mypage;

	private Registry reg;
	private PlaylistService pls;
	Mypage_main my_Main = new Mypage_main();

	int cnt_de = 0;
	int real_no = 0;

	private int from, to, itemsForPage;
	private ObservableList<PlaylistVO> currentPageDate;
	private ObservableList<PlaylistVO> pList;

	/**
	 * 창전환
	 * 
	 * @param url
	 */
	private void changeScene(String url) {
		Parent upParent = null;
		try {
			upParent = FXMLLoader.load(getClass().getResource(url));
		} catch (IOException e1) {
			e1.printStackTrace();
		}
		mainPane.getChildren().setAll(upParent);
	}

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		/**
		 * 플레이리스트 메인
		 */
		MenuConnector menuCon = new MenuConnector();
		menuCon.setPane(mainPane);
		menuCon.setBtn(myinfo_btn, mylevel_btn, buyhistory_btn, musichistory_btn, like_btn, playlist_btn);

		try {
			reg = LocateRegistry.getRegistry("localhost", 8888);
			pls = (PlaylistService) reg.lookup("PlaylistService");
		} catch (RemoteException e) {
			e.printStackTrace();
		} catch (NotBoundException e) {
			e.printStackTrace();
		}

		// String mid = Session.getUser().getMem_id();
		// System.out.println(mid);

		pList = FXCollections.observableArrayList();
		try {
			pList.setAll(pls.selectPlayListAll(Session.getUser().getMem_id()));
		} catch (RemoteException e) {
			e.printStackTrace();
		}

		playlist_no_col.setCellValueFactory(new PropertyValueFactory<>("playlist_id"));
		playlist_info_col.setCellValueFactory(new PropertyValueFactory<>("playlist_name"));

		playlist_table.setItems(pList);

		itemsForPage = 10; // 한페이지에 보여줄 항목 수 설정

		int totItemCnt = pList.size();
		int totPageCnt = totItemCnt % itemsForPage == 0 ? totItemCnt / itemsForPage : totItemCnt / itemsForPage + 1;
		pga.setPageCount(totPageCnt); // 전체 페이지 수 설정

		pga.setPageFactory(new Callback<Integer, Node>() {

			@Override
			public Node call(Integer param) {
				from = param * itemsForPage;
				to = from + itemsForPage - 1;
				playlist_table.setItems(getTableViewDate(from, to));

				return playlist_table;
			}

		});

		/**
		 * 플레이리스트 추가
		 */
		insert_playlist.setOnAction(e -> {
			changeScene("insert_Playlist.fxml");
		});
		/**
		 * 플레이리스트 확인
		 */
		info_playlist.setOnAction(e -> {
			PlaylistVO playlistVO = playlist_table.getSelectionModel().getSelectedItem();
			My_Playlistitem_Controller.infoplaylistitem = playlistVO.getPlaylist_id();
			changeScene("My_Playlistitem.fxml");

		});

		/**
		 * 플레이리스트 수정
		 */
		playlist_table.setOnMouseClicked(new EventHandler<MouseEvent>() {

			@Override
			public void handle(MouseEvent event) {
				if (event.getClickCount() > 1) {
					if (playlist_table.getSelectionModel().isEmpty()) {
						return;
					} else {
						PlaylistVO playlistVO = playlist_table.getSelectionModel().getSelectedItem();
						Playlist_update_Controller.playlistt = playlistVO.getPlaylist_id();
						changeScene("update_Playlist.fxml");
					}
				}

			}

		});

		/**
		 * 플레이리스트 삭제
		 */
		delete_playlist.setOnAction(e -> {

			real_no = playlist_table.getSelectionModel().getSelectedItem().getPlaylist_id();

			try {
				cnt_de = pls.deletePlaylist(real_no);

				if (cnt_de > 0) {
					infoMsg("성공!", "플레이리스트가 성공적으로 삭제되었습니다!");
					changeScene("My_Playlist_Main.fxml");
				} else {
					System.out.println("삭제 안됨..");
					errMsg("실패!", "오류를 찾아주세요.");
				}

			} catch (RemoteException e1) {
				e1.printStackTrace();

			}
		});

	}

	private void infoMsg(String headerText, String msg) {
		Alert infoAlert = new Alert(AlertType.INFORMATION);
		infoAlert.setTitle("알림");
		infoAlert.setHeaderText(headerText);
		infoAlert.setContentText(msg);
		infoAlert.showAndWait();
	}

	private void errMsg(String headerText, String msg) {
		Alert errAlert = new Alert(AlertType.ERROR);
		errAlert.setTitle("오류");
		errAlert.setHeaderText(headerText);
		errAlert.setContentText(msg);
		errAlert.showAndWait();
	}

	private ObservableList<PlaylistVO> getTableViewDate(int from, int to) {
		currentPageDate = FXCollections.observableArrayList(); // 현재페이지 데이터 초기화
		int toSize = pList.size();
		for (int i = from; i <= to && i < toSize; i++) {
			currentPageDate.add(pList.get(i));
		}
		return currentPageDate;
	}
}
