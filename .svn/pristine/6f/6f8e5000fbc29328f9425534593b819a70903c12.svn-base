package kr.or.ddit.nn.view.manager.ticket;

import java.io.IOException;
import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ResourceBundle;

import com.jfoenix.controls.JFXButton;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.control.Pagination;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.Pane;
import javafx.util.Callback;
import kr.or.ddit.nn.service.ticket.TicketService;
import kr.or.ddit.nn.vo.ticket.TicketVO;

public class Manager_TicketController implements Initializable {

	@FXML
	private Pane mainPane;

	@FXML
	private JFXButton ticket_insert_btn;

	@FXML
	private Pagination ticket_pagination;

	@FXML
	private TableView<TicketVO> ticket_table;

	@FXML
	private TableColumn<TicketVO, Integer> ticket_id;

	@FXML
	private TableColumn<TicketVO, String> ticket_name;

	@FXML
	private TableColumn<TicketVO, Integer> ticket_price;

	@FXML
	private TableColumn<TicketVO, Boolean> ticket_activation;

	@FXML
	private TableColumn<TicketVO, Integer> ticket_download;

	private int from, to, itemsForPage;
	private ObservableList<TicketVO> currentPageDate;
	private ObservableList<TicketVO> ticketData;

	private Registry reg;
	private TicketService service;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		ticket_id.setStyle("-fx-alignment: CENTER;");
		ticket_price.setStyle("-fx-alignment: CENTER;");
		ticket_activation.setStyle("-fx-alignment: CENTER;");
		ticket_download.setStyle("-fx-alignment: CENTER;");
		
		ticketData = FXCollections.observableArrayList();

		try {
			reg = LocateRegistry.getRegistry("localhost", 8888);
			service = (TicketService) reg.lookup("ticketService");
		} catch (RemoteException e2) {
			e2.printStackTrace();
		} catch (NotBoundException e2) {
			e2.printStackTrace();
		}

		/**
		 * 이용권 목록 조회
		 */
		try {
			ticketData.setAll(service.viewAllTicketToManager());
		} catch (RemoteException e) {
			e.printStackTrace();
		}

		ticket_id.setCellValueFactory(new PropertyValueFactory<>("ticket_id"));
		ticket_name.setCellValueFactory(new PropertyValueFactory<>("ticket_name"));
		ticket_price.setCellValueFactory(new PropertyValueFactory<>("ticket_price"));
		ticket_activation.setCellValueFactory(new PropertyValueFactory<>("ticket_activation"));
		ticket_download.setCellValueFactory(new PropertyValueFactory<>("ticket_download"));

		ticket_table.setItems(ticketData);

		/**
		 * 페이지네이션 설정
		 */
		itemsForPage = 10;
		int totItemCnt = ticketData.size();
		int totPageCnt = totItemCnt % itemsForPage == 0 ? totItemCnt / itemsForPage : totItemCnt / itemsForPage + 1;
		ticket_pagination.setPageCount(totPageCnt);

		ticket_pagination.setPageFactory(new Callback<Integer, Node>() {
			@Override
			public Node call(Integer param) {
				from = param * itemsForPage;
				to = from + itemsForPage - 1;
				ticket_table.setItems(getTableViewDate(from, to));

				return ticket_table;
			}
		});

		/**
		 * 이용권 상세 보기
		 */
		ticket_table.setOnMouseClicked(new EventHandler<Event>() {
			@Override
			public void handle(Event event) {
				TicketVO fv = ticket_table.getSelectionModel().getSelectedItem();
				Manager_Ticket_DetailController.ticket_id = fv.getTicekt_id();
				changeScene("Manager_Ticket_Detail.fxml");
			}
		});
		
		ticket_insert_btn.setOnAction(e->{
			changeScene("Manager_Insert_Ticket.fxml");
			
		});

	}

	/**
	 * TableView에 채워줄 데이터를 가져오는 메서드
	 * 
	 * @param from
	 * @param to
	 * @return
	 */
	private ObservableList<TicketVO> getTableViewDate(int from, int to) {
		currentPageDate = FXCollections.observableArrayList(); // 현재페이지 데이터 초기화
		int toSize = ticketData.size();
		for (int i = from; i <= to && i < toSize; i++) {
			currentPageDate.add(ticketData.get(i));
		}
		return currentPageDate;
	}

	/**
	 * 센터 화면 변경
	 * @param fxmlURL
	 * @return
	 */
	public FXMLLoader changeScene(String fxmlURL) {
      FXMLLoader loader = new FXMLLoader(getClass().getResource(fxmlURL));
      Parent parent = null;
      try {
         parent = loader.load();
      } catch (IOException e) {
         e.printStackTrace();
      }
      mainPane.getChildren().setAll(parent);
      return loader;
	}

}
